% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quantification.R
\name{quantify_ions}
\alias{quantify_ions}
\title{Quantify proteoform ions}
\usage{
quantify_ions(
  ms_data,
  ions,
  rt_limits = c(-Inf, +Inf),
  filter_ms1 = TRUE,
  ifun_spectrum = c("adaptive", "trapezoidal"),
  ifun_xic = c("trapezoidal", "adaptive")
)
}
\arguments{
\item{ms_data}{Mass spectrometric data stored in an \code{mzR} object as returned
by \code{\link[mzR:openMSfile]{mzR::openMSfile()}}.}

\item{ions}{A data frame specifying ions (see details).}

\item{rt_limits}{A specification of retention time limits (see details).}

\item{filter_ms1}{If true, only scans from MS level 1 are integrated.}

\item{ifun_spectrum}{Integration method for spectra (see details).}

\item{ifun_xic}{Integration method for XICs (see details).}
}
\value{
A list of class \code{quaxi} with seven elements:
\describe{
\item{\code{ms_file}}{Path of the MS data file.}
\item{\code{ifuns}}{Character vector denoting the integration methods used for
spectra and XICs, respectively.}
\item{\code{ions}}{Data frame passed to the argument \code{ions} describing \eqn{i}
ions, with an additional column \code{ion_id} prepended (this column contains a
unique identifier for each ion).}
\item{\code{rt_limits}}{Data frame with \eqn{r} retention time limits (columns
\code{rt_min} and \code{rt_max}) and scan indices enclosed by these limits (columns
\code{scan_min} and \code{scan_max}).}
\item{\code{rt}}{Numeric vector containing \eqn{n} retention times associated
with the \eqn{n} scans in the MS data file.}
\item{\code{xics}}{An \eqn{i \times n}{i-by-n} matrix containing XIC intensity
values, with one row per ion and one column per scan.}
\item{\code{abundances}}{An \eqn{i \times r}{i-by-r} matrix containing
abundances, with one row per ion and one column per retention time window.}
}
}
\description{
This function quantifies proteoform ions in a mass spectrometric (MS) data
file, which comprises several mass spectra recorded at different time points
during a chromatographic run. To this end, \code{quantify_ions()} employs a
two-step integration approach: First, each of the \eqn{i} ions is quantified
in each of the \eqn{n} mass spectra by integrating intensity in the m/z
tolerance window associated with the respective ion. This step yields an
\eqn{i \times n}{i-by-n} matrix of abundances (areas under the curve), with
one row per ion and one column per scan. Rows in this matrix correspond to
extracted ion currents (XICs). Second, each XIC is integrated within the
\eqn{r} given retention time limits. This step yields an \eqn{i \times
r}{i-by-r} matrix of abundances, with one row per ion and one column per
retention time window.
}
\details{
\subsection{Ion specification}{

Ions are provided \emph{via} a data frame that must contain two columns \code{mz_min}
and \code{mz_max} specifying the lower and upper integration limit for each ion.
The data frame may contain additional columns, which are ignored.
}

\subsection{Retention time limits}{

\code{rt_limits} accepts one of the following:
\itemize{
\item a numeric vector with two elements specifying a single retention time
window
\item a data frame with two colums \code{rt_min} and \code{rt_max} (other columns are
ignored) specifying one retention time window per row
\item a data type that can be converted to a data frame, such as a named list
}

The values \code{-Inf} and \code{+Inf} are replaced by the minimum and maximum
retention time, respectively.
}

\subsection{Integration methods}{

The integration method may be selected separately for the spectrum
integration step (by \code{ifun_spectrum}) and the XIC integration step (by
\code{ifun_xic}).
\describe{
\item{\code{"adaptive"}}{Default method for spectrum integration (step 1).
Adaptive quadrature via \code{\link[=approxfun]{approxfun()}} and \code{\link[stats:integrate]{stats::integrate()}}. This method
is faster, but may yield wrong results if the integrand is zero over nearly
all its range (which typically occurs if XICs are integrated over the whole
chromatogram). }
\item{\code{"trapezoidal"}}{Default method for XIC integration (step 2).
Trapezoidal integration, i.e., the exact area under the polygonal chain
formed by (mz or retention time, intensity) tuples. This method is slower,
but always gives correct results for XIC integration.}
}
}
}
\examples{
ms_data <- mzR::openMSfile(
  system.file("extdata", "mzml", "mab1.mzML", package = "fragquaxi")
)

proteins <- define_proteins(
  system.file("extdata", "mab_sequence.fasta", package = "fragquaxi"),
  .disulfides = 16
)

modcoms <- define_ptm_compositions(sample_modcoms)

pfm_ions <-
  assemble_proteoforms(proteins, modcoms) \%>\%
  ionize(36L:40L)

# no rentention time limits: use all spectra
quantify_ions(ms_data, pfm_ions)

# define a single retention time window
quantify_ions(ms_data, pfm_ions, rt_limits = c(240, 330))

# define several retention time windows;
# instead of a list, you may also pass a data frame to rt_limits
quantify_ions(ms_data, pfm_ions,
              rt_limits = list(rt_min = c(0, 240), rt_max = c(60, 330)))
}
